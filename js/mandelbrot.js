// Generated by CoffeeScript 1.3.3

window.require(["jquery", "libs/modernizr-2.5.3-respond-1.1.0.min", "script", "libs/knockout-2.1.0", "mylibs/mandelbrot-core", "mylibs/color-converter", "mylibs/mandelbrot-colors"], function($, modern, script, ko, MandelbrotCore, ColorConverter, MandelbrotColors) {
  "strict mode";

  var Mandelbrot, MandelbrotViewModel, canvasElement, colorConverter, colors, core, mandelbrot, viewModel;
  Mandelbrot = (function() {
    var setCanvasSize;

    function Mandelbrot(mandelbrotCore, mandelbrotColors, canvasElement) {
      var context, worker,
        _this = this;
      this.mandelbrotCore = mandelbrotCore;
      this.mandelbrotColors = mandelbrotColors;
      if (this.mandelbrotCore == null) {
        throw "mandelbrotCore is required";
      }
      if (this.mandelbrotColors == null) {
        throw "mandelbrotColors is required";
      }
      if (canvasElement == null) {
        throw "A canvas element is required";
      }
      this.box = {
        top: 1,
        left: -2,
        bottom: -1,
        right: 1
      };
      context = canvasElement.getContext('2d');
      if (context == null) {
        throw 'Could not build 2d canvas context in canvas';
      }
      setCanvasSize(canvasElement, context);
      if (window.Modernizr.webworkers && window.JSON) {
        worker = new window.Worker('../../js/mylibs/mandelbrot-worker.js');
        this.drawSet = function() {
          var message;
          message = JSON.stringify({
            message: "run",
            width: context.canvas.width,
            height: context.canvas.height,
            box: _this.box,
            maxIterations: 30
          });
          worker.addEventListener('message', (function(event) {
            var data;
            data = JSON.parse(event.data);
            switch (data.message) {
              case "progress":
                break;
              case "success":
                return _this.mandelbrotColors.drawEscapeTimesInContext(data.value, context);
            }
          }), false);
          return worker.postMessage(message);
        };
      } else {
        this.drawSet = function() {
          var escapeTimes;
          escapeTimes = _this.mandelbrotCore.getEscapeTimes(context.canvas.width, context.canvas.height, _this.box, 30);
          return _this.mandelbrotColors.drawEscapeTimesInContext(escapeTimes, context);
        };
      }
      $(window).resize(function() {
        var resizeTimer;
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout((function() {
          return setCanvasSize(canvasElement, context, _this.mandelbrotColors.cachedImage);
        }), 100);
      });
    }

    setCanvasSize = function(canvasElement, context, cachedImage) {
      var height, width;
      width = $(canvasElement).parent().width();
      height = width * 2 / 3.0;
      context.canvas.width = width;
      context.canvas.height = height;
      if (cachedImage != null) {
        context.drawImage(cachedImage, 0, 0, width, height);
      }
    };

    return Mandelbrot;

  })();
  MandelbrotViewModel = function() {
    var _this = this;
    this.maxIterations = ko.observable(30);
    this.loopColorsEvery = ko.observable(30);
    this.progress = ko.observable(50);
    this.inProgress = ko.computed(function() {
      return _this.progress() < 100;
    });
    return this;
  };
  viewModel = new MandelbrotViewModel();
  core = new MandelbrotCore();
  colorConverter = new ColorConverter();
  colors = new MandelbrotColors(colorConverter, viewModel.maxIterations, viewModel.loopColorsEvery);
  canvasElement = document.getElementById('mandelbrot');
  mandelbrot = new Mandelbrot(core, colors, canvasElement);
  viewModel.drawSet = mandelbrot.drawSet;
  viewModel.viewAsImage = function() {
    return window.location = colors.cachedImage.src;
  };
  ko.applyBindings(viewModel);
  mandelbrot.drawSet();
});
