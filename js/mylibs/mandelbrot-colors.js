// Generated by CoffeeScript 1.3.1
(function() {
  var MandelbrotColors,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MandelbrotColors = (function() {
    var generateColorScheme, getColor, setPixel,
      _this = this;

    function MandelbrotColors(colorConverter, maxIterations, loopEvery) {
      var colorScheme,
        _this = this;
      this.colorConverter = colorConverter;
      this.drawEscapeTimesInContext = __bind(this.drawEscapeTimesInContext, this);

      if (!((this.colorConverter != null) && (this.colorConverter.colorToRgb != null))) {
        throw "Cannot construct MandelbrotColors without a colorConverter that imlements colorToRgb({h:,s:,v:}).";
      }
      this.coloringFunctions = {
        hue: function(i) {
          return _this.colorConverter.colorToRgb({
            h: 360 * i / 255,
            s: 1,
            v: 1
          });
        },
        monochrome: function(i) {
          return {
            r: i,
            g: i,
            b: i
          };
        }
      };
      colorScheme = generateColorScheme(this.coloringFunctions.hue);
      this.settings = {
        isBinary: false,
        maxIterations: maxIterations,
        loopEvery: loopEvery,
        insideSetColor: {
          r: 0,
          g: 0,
          b: 0
        },
        colorScheme: colorScheme
      };
    }

    MandelbrotColors.prototype.drawEscapeTimesInContext = function(escapeTimes, context) {
      var height, imageData, row, width, _fn, _i,
        _this = this;
      width = context.canvas.width;
      height = context.canvas.height;
      imageData = context.createImageData(width, height);
      _fn = function(row) {
        var column, _fn1, _j;
        _fn1 = function(column) {
          var color;
          color = getColor(escapeTimes[row][column], _this.settings);
          setPixel(imageData, column, row, color.r, color.g, color.b, 255);
          return 0;
        };
        for (column = _j = 0; 0 <= width ? _j <= width : _j >= width; column = 0 <= width ? ++_j : --_j) {
          _fn1(column);
        }
        return 0;
      };
      for (row = _i = 0; 0 <= height ? _i <= height : _i >= height; row = 0 <= height ? ++_i : --_i) {
        _fn(row);
      }
      return context.putImageData(imageData, 0, 0);
    };

    generateColorScheme = function(func) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 255; i = ++_i) {
        _results.push(func(i));
      }
      return _results;
    };

    getColor = function(escapeTime, settings) {
      var color, index, loopEvery, maxIterations;
      maxIterations = settings.maxIterations;
      if (escapeTime >= maxIterations) {
        return {
          r: settings.insideSetColor.r,
          g: settings.insideSetColor.g,
          b: settings.insideSetColor.b
        };
      } else {
        if (settings.isBinary) {
          color = settings.colorScheme[0];
        } else {
          loopEvery = settings.loopEvery;
          index = Math.floor((escapeTime - Math.floor(escapeTime / loopEvery) * loopEvery) * (255 / loopEvery));
          color = settings.colorScheme[index];
        }
        return color;
      }
    };

    setPixel = function(imageData, x, y, r, g, b, a) {
      var index;
      index = (x + y * imageData.width) * 4;
      imageData.data[index + 0] = r;
      imageData.data[index + 1] = g;
      imageData.data[index + 2] = b;
      return imageData.data[index + 3] = a;
    };

    return MandelbrotColors;

  }).call(this);

  window.MandelbrotColors = MandelbrotColors;

}).call(this);
