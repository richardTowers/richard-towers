// Generated by CoffeeScript 1.3.3
(function() {

  self.define(function() {
    var MandelbrotCore;
    MandelbrotCore = (function() {
      var getEscapeTimeAtPoint, interpolate;

      function MandelbrotCore(progressCallback) {
        this.progressCallback = progressCallback;
      }

      MandelbrotCore.prototype.getEscapeTimes = function(width, height, box, maxIterations) {
        var escapeTimes, row, _fn, _i,
          _this = this;
        escapeTimes = [];
        _fn = function(row) {
          var column, rowTimes, _fn1, _j;
          rowTimes = [];
          _fn1 = function(column) {
            var imaginary, real;
            real = interpolate(column, box.left, box.right, 0, width);
            imaginary = interpolate(row, box.top, box.bottom, 0, height);
            return rowTimes.push(getEscapeTimeAtPoint(real, imaginary, maxIterations));
          };
          for (column = _j = 0; 0 <= width ? _j <= width : _j >= width; column = 0 <= width ? ++_j : --_j) {
            _fn1(column);
          }
          escapeTimes.push(rowTimes);
          if (_this.progressCallback != null) {
            return _this.progressCallback(100 * row / height);
          }
        };
        for (row = _i = 0; 0 <= height ? _i <= height : _i >= height; row = 0 <= height ? ++_i : --_i) {
          _fn(row);
        }
        return escapeTimes;
      };

      interpolate = function(x, y0, y1, x0, x1) {
        return y0 + (x - x0) * ((y1 - y0) / (x1 - x0));
      };

      getEscapeTimeAtPoint = function(real, imaginary, maxIteration) {
        var iteration, x, xtemp, y, _i, _ref;
        _ref = [0, 0], x = _ref[0], y = _ref[1];
        for (iteration = _i = 0; 0 <= maxIteration ? _i <= maxIteration : _i >= maxIteration; iteration = 0 <= maxIteration ? ++_i : --_i) {
          if (x * x + y * y < 2 * 2) {
            xtemp = x * x - y * y + real;
            y = 2 * x * y + imaginary;
            x = xtemp;
          } else {
            break;
          }
        }
        return iteration;
      };

      return MandelbrotCore;

    })();
    return MandelbrotCore;
  });

}).call(this);
