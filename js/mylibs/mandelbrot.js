// Generated by CoffeeScript 1.3.1
(function() {
  var Mandelbrot;

  Mandelbrot = (function() {
    var drawEscapeTimes, drawSetInMainThread, drawSetWithWorker, setCanvasSize;

    function Mandelbrot() {
      var self;
      self = this;
      this.box = {
        top: 1,
        left: -2,
        bottom: -1,
        right: 1
      };
      this.maxIterations = 100;
      if (window.Modernizr.webworkers && window.JSON) {
        this.worker = new window.Worker('../../js/mylibs/mandelbrot-worker.js');
        this.drawSet = function(context, maxIterations) {
          return drawSetWithWorker(this.worker, context, self.box, maxIterations);
        };
      } else {
        this.drawSet = this.drawSetInMainThread;
      }
    }

    Mandelbrot.prototype.run = function(canvasId) {
      var canvas, context, mi, self;
      self = this;
      canvas = document.getElementById(canvasId);
      if (canvas != null) {
        context = canvas.getContext('2d');
        setCanvasSize(canvasId, context);
        this.drawSet(context, this.maxIterations);
        mi = $('#maxIterationsButton').click(function() {
          self.maxIterations = $('#maxIterations').val();
          if (self.worker) {
            self.worker.terminate();
            self.worker = new window.Worker('../../js/mylibs/mandelbrot-worker.js');
          }
          $('#mandelbrotProgress').find('.bar').width('0%');
          self.drawSet(context, self.maxIterations);
          return 0;
        });
        return $(window).resize(function() {
          var resizeTimer;
          clearTimeout(resizeTimer);
          resizeTimer = setTimeout((function() {
            return setCanvasSize(canvasId, context);
          }), 100);
          return 0;
        });
      }
    };

    drawSetWithWorker = function(worker, context, box, maxIterations) {
      var height, message, progressBar, width;
      progressBar = $('#mandelbrotProgress');
      progressBar.show();
      worker.addEventListener('message', (function(e) {
        var data;
        data = JSON.parse(e.data);
        switch (data.message) {
          case "progress":
            return progressBar.find('.bar').css('width', data.value + '%');
          case "success":
            return drawEscapeTimes(context, data.value);
          default:
            return window.alert("Unrecognised message from worker");
        }
      }), false);
      width = context.canvas.width;
      height = context.canvas.height;
      message = JSON.stringify({
        message: "run",
        width: width,
        height: height,
        box: {
          top: box.top,
          left: box.left,
          bottom: box.bottom,
          right: box.right
        },
        maxIterations: maxIterations
      });
      return worker.postMessage(message);
    };

    drawSetInMainThread = function(context) {
      return 0;
    };

    drawEscapeTimes = function(context, escapeTimes) {
      return 0;
    };

    setCanvasSize = function(canvasId, context) {
      var width;
      width = $('#' + canvasId).parent().width();
      context.canvas.width = width;
      context.canvas.height = width * 2 / 3.0;
      return 0;
    };

    return Mandelbrot;

  })();

  window.Mandelbrot = Mandelbrot;

}).call(this);
